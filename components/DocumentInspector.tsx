// === FILE: components/DocumentInspector.tsx ===
"use client";

import { useState, useEffect } from "react";

export function DocumentInspector({ doc }: { doc: any }) {
  const [ocr, setOcr] = useState<string>("(–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è OCR...)");
  const [aiSummary, setAiSummary] = useState<string>("");

  // –ú–∞–ø–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–∏–ø—ñ–≤ —Ç–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
  const typeMap: Record<string, string> = {
    contract: "–î–æ–≥–æ–≤—ñ—Ä",
    claim: "–ü–æ–∑–æ–≤",
    power: "–î–æ–≤—ñ—Ä–µ–Ω—ñ—Å—Ç—å",
  };

  const statusMap: Record<string, string> = {
    draft: "–ß–µ—Ä–Ω–µ—Ç–∫–∞",
    signed: "–ü—ñ–¥–ø–∏—Å–∞–Ω–æ",
    archived: "–ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ",
  };

  // –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è OCR –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  useEffect(() => {
    if (!doc?.versions?.[0]?.file?.pdfa) return;

    const name = doc.versions[0].file.pdfa.split("/").pop()?.replace(".pdf", ".json");
    fetch(`/docs_ocr/${name}`)
      .then((r) => r.json())
      .then((data) => setOcr(data.text?.slice(0, 2000) || "(OCR –ø–æ—Ä–æ–∂–Ω—ñ–π)"))
      .catch(() => setOcr("(OCR –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)"));
  }, [doc]);

  // –ó–∞–ø—É—Å–∫ AI-–∞–Ω–∞–ª—ñ–∑—É –¥–æ–∫—É–º–µ–Ω—Ç—É
  const runAI = async () => {
    const q = `–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –¥–æ–∫—É–º–µ–Ω—Ç: –≤–∏—è–≤–∏—Ç–∏ —Ä–∏–∑–∏–∫–∏, —Å—Ç—Ä–æ–∫–∏, –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ.`;
    const r = await fetch("/api/ai-on-docs", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ question: q, filename: doc.versions?.[0]?.file?.pdfa }),
    });
    const d = await r.json();
    setAiSummary(d.answer || "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.");
  };

  return (
    <div className="space-y-4 p-4 bg-white rounded-xl border shadow-sm">
      <h2 className="text-xl font-semibold text-indigo-700">{doc.title}</h2>

      <div className="text-sm text-gray-700 space-y-1">
        <p>
          <strong>–¢–∏–ø:</strong>{" "}
          {typeMap[doc.type] || doc.type}
        </p>
        <p>
          <strong>–°—Ç–∞—Ç—É—Å:</strong>{" "}
          {statusMap[doc.status] || doc.status}
        </p>
        <p>
          <strong>SHA256:</strong>{" "}
          {doc.versions?.[0]?.sha256
            ? doc.versions[0].sha256.slice(0, 16) + "..."
            : "(–Ω–µ–º–∞—î)"}
        </p>
      </div>

      <button
        onClick={runAI}
        className="px-4 py-2 bg-indigo-600 text-white text-sm rounded-lg hover:bg-indigo-700 transition"
      >
        üîç AI-–∞–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç—É
      </button>

      {aiSummary && (
        <div className="p-3 rounded-md bg-indigo-50 border text-gray-800 text-sm whitespace-pre-wrap">
          {aiSummary}
        </div>
      )}

      <details className="mt-3">
        <summary className="text-sm text-indigo-600 cursor-pointer hover:underline">
          –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ OCR-—Ç–µ–∫—Å—Ç
        </summary>
        <pre className="mt-2 text-xs whitespace-pre-wrap bg-gray-50 p-2 rounded-md max-h-80 overflow-y-auto">
          {ocr}
        </pre>
      </details>
    </div>
  );
}