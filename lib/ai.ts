import OpenAI from "openai";
import { readJson } from "./server-utils";

/** üîê –°–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –≥–∞–ª—é—Ü–∏–Ω–∞—Ü—ñ–π */
export const SYSTEM_LEGAL_GUARDRAILS = `
–í–∏ ‚Äî —é—Ä–∏–¥–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç CRM —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —é—Ä–∏–¥–∏—á–Ω–æ—ó —Ñ—ñ—Ä–º–∏.
1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∏—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏ CRM —Ç–∞ —á–∏–Ω–Ω–µ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏.
2. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –≤–∏–≥–∞–¥—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—ñ, —Å–ø—Ä–∞–≤–∏ —á–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏.
3. –£—Å—ñ —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—É–ø—Ä–æ–≤–æ–¥–∂—É–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞ (–∑–∞–∫–æ–Ω –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç CRM).
4. –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö —É CRM."
5. –ú–æ–≤–∞ ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞.
`;

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

/** üß† –û—Å–Ω–æ–≤–Ω–∏–π Copilot-–∑–∞–ø–∏—Ç */
export async function askLegalCopilot(question: string) {
  const ctx = getCRMContext();

  const res = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    temperature: 0.2,
    messages: [
      { role: "system", content: SYSTEM_LEGAL_GUARDRAILS },
      { role: "user", content: `–ö–æ–Ω—Ç–µ–∫—Å—Ç CRM:\n${ctx}` },
      { role: "user", content: question }
    ],
  });

  return res.choices[0].message?.content?.trim() || "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö.";
}

/** üóÇÔ∏è –§–æ—Ä–º—É—î –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç CRM */
function getCRMContext() {
  try {
    const clients = readJson<any[]>("data/clients.json").slice(0, 5);
    const cases = readJson<any[]>("data/cases.json").slice(0, 5);
    const docs = readJson<any[]>("data/documents.json").slice(0, 5);
    const calendar = readJson<any[]>("data/calendar.json").slice(0, 5);
    return JSON.stringify({ clients, cases, docs, calendar }, null, 2);
  } catch {
    return "–ö–æ–Ω—Ç–µ–∫—Å—Ç CRM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.";
  }
}

/** üìÑ AI-–∞–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ */
export async function legalChatOnDocs(question: string, docsText: string) {
  const systemPrompt = `
  –í–∏ ‚Äî —é—Ä–∏–¥–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫ CRM.
  1. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –≤–∏–∫–ª—é—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.
  2. –ù–µ –¥–æ–¥–∞–≤–∞–π—Ç–µ –≤–∏–≥–∞–¥–∞–Ω—ñ —Ñ–∞–∫—Ç–∏ –∞–±–æ —Å—Ç–∞—Ç—Ç—ñ.
  3. –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–º–∞—î ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö —É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."
  4. –ú–æ–≤–∞ ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞.
  `;

  const prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:\n${docsText}\n\n–ü–∏—Ç–∞–Ω–Ω—è: ${question}`;

  const res = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    temperature: 0,
    messages: [
      { role: "system", content: systemPrompt },
      { role: "user", content: prompt },
    ],
  });

  return res.choices[0].message?.content?.trim() || "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö —É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.";
}